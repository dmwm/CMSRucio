#! /usr/bin/env python3

import io
import json
import os
import requests
import time

from rucio.client import Client

QUERY_HEADER = '{"search_type":"query_then_fetch","ignore_unavailable":true,"index":["monit_prod_cmssst_*"]}'
DRY_RUN = False

with open('availability_lucene.json', 'r') as lucene_json:
    lucene = json.load(lucene_json)

lucene["query"]["bool"]["filter"]["range"]["metadata.timestamp"]["gte"] = int(time.time() - 3 * 24 * 60 * 60)
lucene["query"]["bool"]["filter"]["range"]["metadata.timestamp"]["lt"] = int(time.time() + 900)

query = io.StringIO(QUERY_HEADER + '\n' + json.dumps(lucene) + '\n')

headers = {'Authorization': 'Bearer %s' % os.environ['MONIT_TOKEN'],
           'Content-Type': 'application/json'}

r = requests.post('https://monit-grafana.cern.ch/api/datasources/proxy/9475/_msearch', data=query, headers=headers)

j = json.loads(r.text)

sites = [record['_source']['data'] for record in j['responses'][0]['hits']['hits']]

rclient = Client()

available_map = {}
skip_rses = [rse['rse'] for rse in rclient.list_rses(rse_expression='skip_site_availability_update=True')]
all_rses = [rse['rse'] for rse in rclient.list_rses()]

# Records are sorted most recent to least recent. Pick up the value for the most recent for a site
for site in sites:
    site_name = site['name']

    # Get the disk rse for the site
    # Are there sites that don't have a disk rse but only a tape rse?
    site_rses = []
    if site_name in all_rses:
        rse_disk = site_name
        site_rses.append(rse_disk)
    elif site_name + '_Disk' in all_rses:
        rse_disk = site_name + '_Disk'
        site_rses.append(rse_disk)

    # Get the Tape rse for the site - if any
    if site_name + '_Tape' in all_rses:
        rse_tape = site_name + '_Tape'
        site_rses.append(rse_tape)

    for rse in site_rses:
        if rse in skip_rses:
            continue
        if rse.startswith('T3_'):
            continue  # Until we get good metrics for Tier3s
        if rse in available_map:
            continue
        ssb_status = site.get('status', None)
        if not ssb_status or ssb_status != 'enabled':
            available_map[rse] = False
        else:
            available_map[rse] = True

print("Skipping RSEs: %s" % skip_rses)

for rse, available in available_map.items():
    try:
        if not DRY_RUN:
            rclient.update_rse(rse, {"availability_write": available, "availability_delete": available})
        print('Setting availability for %s to %s' % (rse, available))
    except Exception as e:  # Should never be the case
        print('Failed to update RSE %s, Error %s' % (rse, e))

