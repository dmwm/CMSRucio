#! /usr/bin/env python3

# This script updates the rucio static usage for a given site reading values from 
# scap15min index in CMSMONIT Opensearch
# It is meant to be run as a cronjob
# Site admins can modify the values from https://cmssst.web.cern.ch/cgi-bin/set/SiteCapacity
# For more information on what the values mean, refer https://twiki.cern.ch/twiki/bin/view/CMS/SiteSupportDiskSpace


import io
import json
import logging
import os
import requests
import sys
import traceback

from datetime import datetime
from requests.exceptions import ConnectionError

from rucio.client import Client
from rucio.common.exception import ConfigNotFound, InvalidRSEExpression
from setLocalAccountQuotas import setLocalUsersQuota

# Set dry_run to True to test the script without updating the static usage
dry_run = False
debug = False

if debug:
    logging_level = logging.DEBUG
else:
    logging_level = logging.INFO

# configure logging with a custom format
logging.basicConfig(format='%(asctime)s %(levelname)s %(message)s', level=logging_level)

logger = logging.getLogger(__name__)


# Build the opensearch get request
QUERY_HEADER = '{"search_type":"query_then_fetch","ignore_unavailable":true,"index":["monit_prod_cmssst_*"]}'
MAX_MIN_FREE_PERCENTAGE = 20.0
DEFAULT_MIN_FREE_PERCENTAGE = 10.0

try:
    path = os.path.dirname(os.path.realpath(__file__))
    with open(f'{path}/capacity_lucene.json', 'r') as lucene_json:
        lucene = json.load(lucene_json)
except FileNotFoundError as e:
    logger.error(f'Failed to load lucene query: {e}')
    sys.exit(1)

# The metric is updated periodically at an interval of 24 hours, and also additionaly on a 30 min interval in case of updates
time_now = int(datetime.utcnow().timestamp())
lucene["query"]["bool"]["filter"]["range"]["metadata.timestamp"]["gte"] =  time_now - 24 * 60 * 60
lucene["query"]["bool"]["filter"]["range"]["metadata.timestamp"]["lt"] = time_now

query = io.StringIO(QUERY_HEADER + '\n' + json.dumps(lucene) + '\n')
headers = {'Authorization': 'Bearer %s' % os.environ['MONIT_TOKEN'],
           'Content-Type': 'application/json'}

# Get the data from opensearch
try:
    logger.debug('Querying opensearch')
    r = requests.post('https://monit-grafana.cern.ch/api/datasources/proxy/9475/_msearch', data=query, headers=headers)
    j = json.loads(r.text)
    if r.status_code != 200:
        logger.error(f'Failed to query opensearch: {r.status_code} {r.text}')
        raise ConnectionError
    if j['responses'][0]['hits']['total'] == 0 or len(j['responses'][0]['hits']['hits']) == 0:
        logger.error(f'No data found in opensearch')
        raise Exception("No data found in opensearch")

    # Filter responses to keep records with highest (latest) metadata.timestamp
    sites = []
    for record in j['responses'][0]['hits']['hits']:
        if record['_source']['data']['name'] not in [site['name'] for site in sites]:
            new_site = record['_source']['data']
            new_site['timestamp'] = record['_source']['metadata']['timestamp']
            sites.append(new_site)
        else:
            for site in sites:
                if site['name'] == record['_source']['data']['name']:
                    if site['timestamp'] < record['_source']['metadata']['timestamp']:
                        sites.remove(site)
                        new_site = record['_source']['data']
                        new_site['timestamp'] = record['_source']['metadata']['timestamp']
                        sites.append(new_site)

except Exception as e:
    logger.error(f'Invalid or No data in OpenSearch, Cannot update site capacity {e}')
    sys.exit(1)


# Update the rucio static usage
try:
    rclient = Client()
    group_accounts = set(account['account'] for account in rclient.list_accounts(account_type="GROUP"))

    try:
        skip_rses = [rse['rse'] for rse in rclient.list_rses(rse_expression='skip_site_capacity_update=True')]
    except InvalidRSEExpression as e:
        skip_rses = []

    try:
        default_min_free_space_percentage = float(rclient.get_config(section='rses', option='default_min_free_space_percentage'))

        # Preventing accidental setting of min_free_space_percentage to a very high value
        if default_min_free_space_percentage > MAX_MIN_FREE_PERCENTAGE:
            raise Exception(f"Invalid default_min_free_space_percentage: {default_min_free_space_percentage}")
    except ConfigNotFound as e:
        default_min_free_space_percentage = DEFAULT_MIN_FREE_PERCENTAGE
    except Exception as e:
        logger.warn(f"Unexpected value for default_min_free_space_percentage: {e}")
        default_min_free_space_percentage = DEFAULT_MIN_FREE_PERCENTAGE

    rses = [rse['rse'] for rse in rclient.list_rses('cms_type=real&rse_type=DISK')]
    tape_rses = [rse['rse'] for rse in rclient.list_rses('cms_type=real&rse_type=TAPE')]

    for site in sites :
        # Update static usage for Tapes
        tape_rse = f"{site['name']}_Tape"
        if tape_rse in tape_rses and tape_rse not in skip_rses:
            tape_usable_bytes = site['tape_usable'] * 1e12

            current_static_usage = list(rclient.get_rse_usage(rse=tape_rse, filters={'source':'static'}))
            if len(current_static_usage) == 0:
                current_static_usage = 0
            else:
                current_static_usage = current_static_usage[0]['used']

            if tape_usable_bytes != current_static_usage:
                if dry_run:
                    logger.info(f"Updating static usage, from {current_static_usage*1e-12:.2f}TB to {tape_usable_bytes*1e-12:.2f}TB, for {tape_rse}, dry_run=True")
                else:
                    rclient.set_rse_usage(rse=tape_rse, source='static', used=tape_usable_bytes, free=None)
                    logger.info(f"Updating static usage, from {current_static_usage*1e-12:.2f}TB to {tape_usable_bytes*1e-12:.2f}TB, for {tape_rse}")

        # Update static usage for Disks
        if site['name'] in rses:
            rse = site['name']
        elif f"{site['name']}_Disk" in rses:
            rse = f"{site['name']}_Disk"
        else:
            logger.debug(f"RSE {site['name']} or {site['name']}_Disk not a valid RSE")
            continue

        if rse in skip_rses:
            logger.debug(f"Skipping static usage update for {rse}")
            continue

        logger.debug(f"Updating static usage for {rse}")
        disk_experiment_use_bytes = site['disk_experiment_use'] * 1e12 #total space used by CMS experiment data
        disk_local_use_bytes = site['disk_local_use'] * 1e12 #additional quota for local rse_local_users account
        rse_available_bytes = disk_experiment_use_bytes + disk_local_use_bytes

        # Set Quota for local users account for the rse
        setLocalUsersQuota(rclient, group_accounts, rse, disk_local_use_bytes, logger, dry_run)

        min_free_space_percentage = default_min_free_space_percentage
        rse_attributes = rclient.list_rse_attributes(rse=rse)
        if 'min_free_space_percentage' in rse_attributes:
            min_free_space_percentage = float(rse_attributes['min_free_space_percentage'])
            if min_free_space_percentage > MAX_MIN_FREE_PERCENTAGE:
                min_free_space_bytes = default_min_free_space_percentage

        try:
            # Static usage is 0 for many T3s - These are managed as quasi-static
            if disk_experiment_use_bytes == 0:
                logger.debug(f"Static usage for {rse} is 0, skipping")
                continue

            current_static_usage = list(rclient.get_rse_usage(rse=rse, filters={'source':'static'}))
            # Taking into account the case where the static usage is not yet set but the site wishes to change from quasi-static to static
            if len(current_static_usage) == 0:
                current_static_usage = 0
            else:
                current_static_usage = current_static_usage[0]['used']

            rse_limits = rclient.get_rse_limits(rse=rse)
            if 'MinFreeSpace' in rse_limits:
                current_min_free_space = rse_limits['MinFreeSpace']
            else:
                current_min_free_space = 0

            min_free_space_bytes = int(rse_available_bytes*min_free_space_percentage*0.01)
            # Trigger update on both value and configuraton change
            if current_static_usage == rse_available_bytes and current_min_free_space == min_free_space_bytes:
                logger.debug(f"Static usage for {rse} already up to date")
                continue

            if dry_run:
                logger.info(f"Updating static usage, from {current_static_usage*1e-12:.2f}TB to {rse_available_bytes*1e-12:.2f}TB, for {rse}, dry_run=True")
                logger.info(f"Updating MinFreeSpace, from {current_min_free_space*1e-12:.2f}TB to {min_free_space_bytes*1e-12:.2f}TB, for {rse}, dry_run=True")

            else:
                rclient.set_rse_usage(rse=rse, source='static', used=rse_available_bytes, free=None)
                rclient.set_rse_limits(rse=rse, name='MinFreeSpace', value=min_free_space_bytes)
                logger.info(f"Updating static usage, from {current_static_usage*1e-12:.2f}TB to {rse_available_bytes*1e-12:.2f}TB, for {rse}")
                logger.info(f"Updating MinFreeSpace, from {current_min_free_space*1e-12:.2f}TB to {min_free_space_bytes*1e-12:.2f}TB, for {rse}")
        except Exception as e:
            logger.error(f"Failed to update static usage for {rse}: {e}")
            traceback.print_exc()


except Exception as e:
    logger.error(f'Failed to connect to rucio: {e}')
    traceback.print_exc()


